---
title: "NORC AmeriSpeak Omnibus: Final Tables"
author: "Erik Westlund"
date: "2025-06-02"
date-modified: "`r format(Sys.Date(), '%Y-%m-%d')`"
format: 
  html:
    toc: true
    toc-float: true
    toc-depth: 5
    theme: cosmo
    code-fold: true
    fontsize: 1em
    linestretch: 1.1
    self-contained: true
execute:
  echo: false
  warning: false
  message: false
  cache: false
editor:
  render-on-save: true
---

```{r setup}
#| include: false


# Load all required packages and source utility files
source("project-setup.R")
```


## Table 1. Vaccine-Related Questions

::: {.panel-tabset}
#### Full Table with SEs
```{r table_1_full}
#| echo: false
#| warning: false
#| message: false

# Define vaccine-related variables
vaccine_vars <- c(
  "JHU7_1",  # Health care
  "JHU7_2",  # Foreign policy
  "JHU7_3",  # Democracy
  "JHU7_4",  # Inflation
  "JHU7_5",  # Immigration
  "JHU7_6",  # Crime
  "JHU7_7",  # Jobs
  "JHU7_8",  # Abortion
  "JHU7_9",  # Vaccines
  "JHU7_10", # Poverty
  "JHU7_11", # Inequality
  "JHU7_12", # Education
  "JHU5A",   # Continue government support for vaccines
  "JHU6C"    # Removing school vaccination requirements
)

# Filter meta for this block
meta_vaccine <- meta |> filter(var %in% vaccine_vars)

# Party categories to loop across
party_levels <- c("New Trump Voter", "Trump Voter", "New Harris Voter", "Biden/Harris Voter")

# Build table
table_1 <- map_dfr(vaccine_vars, function(var) {
  # Prepare data for chi-square
  temp_data_all <- data |>
    filter(
      !is.na(get(var)),
      !get(var) %in% c("DON'T KNOW", "SKIPPED ON WEB", "REFUSED"),
      !is.na(party_switch_analysis)
    ) |>
    mutate(.var = droplevels(factor(get(var))))
  
  temp_design_all <- svydesign(ids = ~1, weights = ~WEIGHT_EN, data = temp_data_all)
  
  # Special handling for headers
  if (var == "JHU7_1") {
    # Only add the election issues header for the first JHU7 question
    header_row <- tibble(
      Response = "<strong>Which issues, if any, mattered to you during the 2024 presidential election? Choose up to 3.</strong>",
      `All %` = "",
      `New Trump Voter %` = "",
      `Trump Voter %` = "",
      `New Harris Voter %` = "",
      `Biden/Harris Voter %` = ""
    )
  } else if (var == "JHU5A") {
    header_row <- tibble(
      Response = "<strong>Here is a list of specific policy goals. To what extent would you support or oppose them?</strong><br><em>Continue government support for research and development of new vaccines</em>",
      `All %` = "",
      `New Trump Voter %` = "",
      `Trump Voter %` = "",
      `New Harris Voter %` = "",
      `Biden/Harris Voter %` = ""
    )
  } else if (var == "JHU6C") {
    header_row <- tibble(
      Response = "<em>Removing school vaccination requirements</em>",
      `All %` = "",
      `New Trump Voter %` = "",
      `Trump Voter %` = "",
      `New Harris Voter %` = "",
      `Biden/Harris Voter %` = ""
    )
  } else {
    header_row <- NULL
  }
  
  # For JHU7 questions, we only want "Yes" responses
  if (str_starts(var, "JHU7_")) {
    temp_data <- data |> 
      filter(!is.na(get(var)), !is.na(party_switch_analysis)) |> 
      mutate(temp = ifelse(as.character(get(var)) == "Yes", 1, 0))
    
    temp_design <- svydesign(ids = ~1, weights = ~WEIGHT_EN, data = temp_data)
    
    # Calculate overall percentage
    overall_prop <- svymean(~temp, design = temp_design, na.rm = TRUE)
    overall_pct <- 100 * as.numeric(overall_prop)
    overall_se <- 100 * as.numeric(SE(overall_prop))
    
    # Calculate party-specific percentages
    prop_result <- svyby(
      ~temp,
      ~party_switch_analysis,
      design = temp_design,
      svymean,
      na.rm = TRUE,
      drop.empty.groups = FALSE
    )
    
    prop_df <- tibble(
      group = prop_result$party_switch_analysis,
      pct = 100 * as.numeric(prop_result$temp),
      se = 100 * as.numeric(SE(prop_result))
    ) |>
      right_join(tibble(group = party_levels), by = "group") |>
      mutate(
        pct = ifelse(is.na(pct), 0, pct),
        se = ifelse(is.na(se), 0, se),
        formatted = sprintf("%.1f (%.1f)", pct, se)
      )
    
    # Create response row with the correct topic
    topic <- meta_vaccine |> filter(var == !!var) |> pull(topic)
    response_row <- tibble(
      Response = ifelse(var == "JHU7_9", "<strong>Vaccines</strong>", topic),
      `All %` = sprintf("%.1f (%.1f)", overall_pct, overall_se),
      `New Trump Voter %` = prop_df$formatted[prop_df$group == "New Trump Voter"],
      `Trump Voter %` = prop_df$formatted[prop_df$group == "Trump Voter"],
      `New Harris Voter %` = prop_df$formatted[prop_df$group == "New Harris Voter"],
      `Biden/Harris Voter %` = prop_df$formatted[prop_df$group == "Biden/Harris Voter"]
    )
    
    if (!is.null(header_row)) {
      bind_rows(header_row, response_row)
    } else {
      response_row
    }
  } else {
    # Original handling for JHU5A and JHU6C
    responses <- levels(droplevels(factor(data[[var]])))
    responses <- responses[!responses %in% c("DON'T KNOW", "SKIPPED ON WEB", "REFUSED")]
    
    category_rows <- map_dfr(responses, function(response) {
      temp_data <- data |> 
        filter(!is.na(get(var)), !is.na(party_switch_analysis)) |> 
        mutate(temp = ifelse(as.character(get(var)) == response, 1, 0))
      
      temp_design <- svydesign(ids = ~1, weights = ~WEIGHT_EN, data = temp_data)
      
      overall_prop <- svymean(~temp, design = temp_design, na.rm = TRUE)
      overall_pct <- 100 * as.numeric(overall_prop)
      overall_se <- 100 * as.numeric(SE(overall_prop))
      
      prop_result <- svyby(
        ~temp,
        ~party_switch_analysis,
        design = temp_design,
        svymean,
        na.rm = TRUE,
        drop.empty.groups = FALSE
      )
      
      prop_df <- tibble(
        group = prop_result$party_switch_analysis,
        pct = 100 * as.numeric(prop_result$temp),
        se = 100 * as.numeric(SE(prop_result))
      ) |>
        right_join(tibble(group = party_levels), by = "group") |>
        mutate(
          pct = ifelse(is.na(pct), 0, pct),
          se = ifelse(is.na(se), 0, se),
          formatted = sprintf("%.1f (%.1f)", pct, se)
        )
      
      tibble(
        Response = response,
        `All %` = sprintf("%.1f (%.1f)", overall_pct, overall_se),
        `New Trump Voter %` = prop_df$formatted[prop_df$group == "New Trump Voter"],
        `Trump Voter %` = prop_df$formatted[prop_df$group == "Trump Voter"],
        `New Harris Voter %` = prop_df$formatted[prop_df$group == "New Harris Voter"],
        `Biden/Harris Voter %` = prop_df$formatted[prop_df$group == "Biden/Harris Voter"]
      )
    })
    
    bind_rows(header_row, category_rows)
  }
})


table_1|> 
  kable(escape = FALSE, format = "html") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = TRUE,
                html_font = "Arial") |>
  add_header_above(c(" " = 1, "All" = 1, "Weighted Estimates: % (SE)" = 4)) |>
  column_spec(1, width = "50%") |>
  column_spec(2:6, width = "10%") |>
  column_spec(2:6, extra_css = "white-space: nowrap; overflow: hidden;")
```

#### Without New Harris Voter
```{r table_2_no_new_harris}
#| echo: false
#| warning: false
#| message: false

table_1 |> 
  select(-`New Harris Voter %`) |>
  kable(escape = FALSE, format = "html") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = TRUE,
                html_font = "Arial") |>
  add_header_above(c(" " = 1, "All" = 1, "Weighted Estimates: % (SE)" = 3)) |>
  column_spec(1, width = "50%") |>
  column_spec(2:5, width = "10%") |>
  column_spec(2:5, extra_css = "white-space: nowrap; overflow: hidden;")
```

#### Without Standard Errors
```{r table_1_no_se}
#| echo: false
#| warning: false
#| message: false

# Create a version without standard errors
table_1_no_se <- table_1 |>
  mutate(across(c(`All %`, `New Trump Voter %`, `Trump Voter %`, `New Harris Voter %`, `Biden/Harris Voter %`),
                ~str_replace(., "\\([0-9.]+\\).*$", "")))

table_1_no_se |> 
  kable(escape = FALSE, format = "html") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = TRUE,
                html_font = "Arial") |>
  add_header_above(c(" " = 1, "All" = 1, "Weighted Estimates: %" = 4)) |>
  column_spec(1, width = "50%") |>
  column_spec(2:6, width = "10%") |>
  column_spec(2:6, extra_css = "white-space: nowrap; overflow: hidden;")
```

#### Without SEs and New Harris
```{r table_1_no_se_no_new_harris}
#| echo: false
#| warning: false
#| message: false

# Create a version without standard errors and without New Harris Voter
table_1_no_se |> 
  select(-`New Harris Voter %`) |>
  kable(escape = FALSE, format = "html") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), 
                full_width = TRUE,
                html_font = "Arial") |>
  add_header_above(c(" " = 1, "All" = 1, "Weighted Estimates: %" = 3)) |>
  column_spec(1, width = "50%") |>
  column_spec(2:5, width = "10%") |>
  column_spec(2:5, extra_css = "white-space: nowrap; overflow: hidden;")
```
:::


## Appendix Table 2. Demographics

::: {.panel-tabset}
#### Full Table with SEs
```{r demographics_table_full}
#| echo: false
#| warning: false
#| message: false

# Define variables of interest with proper names and documentation
demographic_vars <- c(
  "Age" = "age_cat",
  "Race/Ethnicity" = "race_eth_cat",
  "Gender" = "gender_cat",
  "Education" = "education_cat",
  "Income" = "income_cat",
  "Region" = "region_cat",
  "Party Identification" = "PartyID5"
)

# Create survey design
svy_design <- svydesign(
  ids = ~1, 
  weights = ~WEIGHT_EN, 
  data = data |> mutate(one = 1),
  na.action = na.omit
)

# Party categories to loop across
party_levels <- c("Trump Voter", "New Trump Voter", "Biden/Harris Voter", "New Harris Voter")

# Add total rows
total_rows <- tibble(
  Category = c("Total", "2020/2024 Voters"),
  `N` = c("", format(sum(!is.na(data$party_switch_analysis)), big.mark = ",")),
  `N (Wtd.)` = c("", format(round(sum(weights(subset(svy_design, !is.na(party_switch_analysis)))), 1), big.mark = ",")),
  `% (SE)` = c("", "100.0 (0.0)"),
  `New Trump Voter` = c("", ""),
  `Trump Voter` = c("", ""),
  `New Harris Voter` = c("", ""),
  `Biden/Harris Voter` = c("", "")
)

# Build the table
demographics_table <- map_dfr(names(demographic_vars), function(label) {
  var <- demographic_vars[[label]]
  
  # Get levels used in this variable
  groups <- levels(droplevels(factor(data[[var]])))
  
  # Filter out "Unknown" for Party Identification
  if (var == "PartyID5") {
    groups <- groups[groups != "Unknown"]
  }
  
  # Create dummy header row for the variable
  header_row <- tibble(
    Category = label,
    `N` = "",
    `N (Wtd.)` = "",
    `% (SE)` = "",
    `New Trump Voter` = "",
    `Trump Voter` = "",
    `New Harris Voter` = "",
    `Biden/Harris Voter` = ""
  )
  
  # Category-level rows
  category_rows <- map_dfr(groups, function(level_val) {
    # Calculate unweighted and weighted N
    unweighted_n <- sum(!is.na(data[[var]]) & data[[var]] == level_val & !is.na(data$party_switch_analysis))
    
    # Calculate column percentages for each vote status
    vote_status_percents <- map_dfr(party_levels, function(vote_status) {
      # Subset design for this vote status
      status_design <- subset(svy_design, party_switch_analysis == vote_status)
      
      # Calculate percentage of this demographic group within this vote status
      subset_design <- subset(status_design, !is.na(get(var)) & get(var) == level_val)
      
      # Get weighted N for this group within this vote status
      weighted_n <- sum(weights(subset_design))
      
      # Get total weighted N for this vote status
      total_weighted_n <- sum(weights(status_design))
      
      # Calculate percentage
      pct <- 100 * weighted_n / total_weighted_n
      
      # Calculate SE using survey package
      se <- tryCatch({
        # Create a binary indicator for this level
        status_design$is_level <- as.numeric(status_design$variables[[var]] == level_val)
        prop <- svymean(~is_level, design = status_design, na.rm = TRUE)
        100 * as.numeric(SE(prop))
      }, error = function(e) {
        # If error, calculate SE using the formula for a proportion
        p <- weighted_n / total_weighted_n
        sqrt(p * (1 - p) / total_weighted_n) * 100
      })
      
      tibble(
        vote_status = vote_status,
        pct = pct,
        se = se
      )
    })
    
    # Calculate overall percentage
    subset_design <- subset(svy_design, !is.na(get(var)) & get(var) == level_val)
    weighted_n <- sum(weights(subset_design))
    total_weighted_n <- sum(weights(svy_design))
    overall_pct <- 100 * weighted_n / total_weighted_n
    
    # Calculate overall SE
    overall_se <- tryCatch({
      svy_design$is_level <- as.numeric(svy_design$variables[[var]] == level_val)
      prop <- svymean(~is_level, design = svy_design, na.rm = TRUE)
      100 * as.numeric(SE(prop))
    }, error = function(e) {
      # If error, calculate SE using the formula for a proportion
      p <- weighted_n / total_weighted_n
      sqrt(p * (1 - p) / total_weighted_n) * 100
    })
    
    tibble(
      Category = as.character(level_val),
      `N` = format(unweighted_n, big.mark = ","),
      `N (Wtd.)` = format(round(weighted_n, 1), big.mark = ","),
      `% (SE)` = sprintf("%.1f (%.1f)", overall_pct, overall_se),
      `New Trump Voter` = sprintf("%.1f (%.1f)", 
        vote_status_percents$pct[vote_status_percents$vote_status == "New Trump Voter"],
        vote_status_percents$se[vote_status_percents$vote_status == "New Trump Voter"]),
      `Trump Voter` = sprintf("%.1f (%.1f)", 
        vote_status_percents$pct[vote_status_percents$vote_status == "Trump Voter"],
        vote_status_percents$se[vote_status_percents$vote_status == "Trump Voter"]),
      `New Harris Voter` = sprintf("%.1f (%.1f)", 
        vote_status_percents$pct[vote_status_percents$vote_status == "New Harris Voter"],
        vote_status_percents$se[vote_status_percents$vote_status == "New Harris Voter"]),
      `Biden/Harris Voter` = sprintf("%.1f (%.1f)", 
        vote_status_percents$pct[vote_status_percents$vote_status == "Biden/Harris Voter"],
        vote_status_percents$se[vote_status_percents$vote_status == "Biden/Harris Voter"])
    )
  })
  
  bind_rows(header_row, category_rows)
})

# Add total counts to the table
demographics_table <- bind_rows(
  total_rows,
  demographics_table
)

# Display the table with kable formatting
demographics_table |> 
  kable(escape = FALSE, format = "html") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed")) |>
  add_header_above(c(" " = 1, "All" = 3, "Weighted Estimates: % (SE)" = 4)) |>
  row_spec(which(demographics_table$Category %in% c(names(demographic_vars), "Total")), bold = TRUE)
```

#### Without New Harris Voter
```{r demographics_table_no_new_harris}
#| echo: false
#| warning: false
#| message: false

# Use the same demographics_table but remove the New Harris Voter column
demographics_table |> 
  select(-`New Harris Voter`) |>
  kable(escape = FALSE, format = "html") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed")) |>
  add_header_above(c(" " = 1, "All" = 3, "Weighted Estimates: % (SE)" = 3)) |>
  row_spec(which(demographics_table$Category %in% c(names(demographic_vars), "Total")), bold = TRUE)
```

#### Without Standard Errors
```{r demographics_table_no_se}
#| echo: false
#| warning: false
#| message: false

# Create a version without standard errors
demographics_table_no_se <- demographics_table |>
  rename(
    `%` = `% (SE)`,
    `New Trump Voter %` = `New Trump Voter`,
    `Trump Voter %` = `Trump Voter`,
    `New Harris Voter %` = `New Harris Voter`,
    `Biden/Harris Voter %` = `Biden/Harris Voter`
  ) |>
  mutate(across(c(`%`, `New Trump Voter %`, `Trump Voter %`, `New Harris Voter %`, `Biden/Harris Voter %`),
                ~str_replace(., "\\([0-9.]+\\).*$", "")))

demographics_table_no_se |> 
  kable(escape = FALSE, format = "html") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed")) |>
  add_header_above(c(" " = 1, "All" = 3, "Weighted Estimates: %" = 4)) |>
  row_spec(which(demographics_table$Category %in% c(names(demographic_vars), "Total")), bold = TRUE)
```

#### Without SEs and New Harris
```{r demographics_table_no_se_no_new_harris}
#| echo: false
#| warning: false
#| message: false

# Create a version without standard errors and without New Harris Voter
demographics_table_no_se |> 
  select(-`New Harris Voter %`) |>
  kable(escape = FALSE, format = "html") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed")) |>
  add_header_above(c(" " = 1, "All" = 3, "Weighted Estimates: %" = 3)) |>
  row_spec(which(demographics_table$Category %in% c(names(demographic_vars), "Total")), bold = TRUE)
```
:::

## Save Tables for Word Document

```{r save_tables}
#| echo: false
#| warning: false
#| message: false

# Create data directory if it doesn't exist
dir.create("data", showWarnings = FALSE)

# Save Table 1 (without New Harris Voter, with SEs)
table_1_no_harris <- table_1 |> 
  select(-`New Harris Voter %`)

# Save Appendix Table 2 (without New Harris Voter)
appendix_table_2_no_harris <- demographics_table |> 
  select(-`New Harris Voter`)

# Save to RDS files
saveRDS(table_1_no_harris, "data/table_1.rds")
saveRDS(appendix_table_2_no_harris, "data/appendix_table_2.rds")
```
